description: ''
type: object
x-examples:
  example-1:
    type: string
    psk: string
    enable_mac_auth: true
    multi_psk_only: true
    pairwise: null
    wep_as_secondary_auth: true
    keys:
      - string
    key_idx: 0
    eap_reauth: true
    owe: string
    private_wlan: true
properties:
  type:
    type: string
    minLength: 1
    description: 'open / psk / wep / eap / psk-tkip / psk-wpa2-tkip, default is open'
  psk:
    type: string
    minLength: 1
    description: 'when type=psk, 8-64 characters, or 64 hex characters'
  enable_mac_auth:
    type: boolean
    description: |
      whether to enable MAC Auth, uses the same auth_servers, default is false
  multi_psk_only:
    type: boolean
    description: |
      whether to only use multi_psk, default is false
  pairwise:
    type: array
    description: 'when type=psk / eap, one of more of wpa2-ccmp / wpa1-tkip / wpa1-ccmp / wpa2-tkip, default is [“wpa2-ccmp”]'
    items:
      type: string
  wep_as_secondary_auth:
    type: boolean
    description: |
      enable WEP as secondary auth
  keys:
    type: array
    description: 'when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length'
    items:
      type: string
  key_idx:
    type: number
    description: 'when type=wep, 1 to 4, default is 1'
  eap_reauth:
    type: boolean
    description: |
      whether to trigger EAP reauth when the session ends, default is false
  owe:
    type: string
    minLength: 1
  private_wlan:
    type: boolean
    description: |
      whether private wlan is enabled. only applicable to multi_psk mode
required:
  - type
  - enable_mac_auth
  - multi_psk_only
  - pairwise
  - wep_as_secondary_auth
  - eap_reauth
  - owe
