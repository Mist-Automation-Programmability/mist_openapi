openapi: 3.0.0
info:
  contact:
    email: tmunzer@juniper.net
    name: Thomas Munzer
  description: |
    > *Version 0.2.5*
    >
    > Date: October 22th, 2020
    >

    *This is still a Work In Progress.*

    --- 

    #### Available Postman Envinronments
    * [US Environment](https://documenter.getpostman.com/view/224925/SzYgQufe)
    * [EU Environment](https://documenter.getpostman.com/view/11418445/TVCe28uT)

    ---
    #### Useful links
    * [Mist Homepage](https://www.mist.com)
    * [Mist Documentation](https://www.mist.com/documentation)
    * [Official API Documentation](https://api.mist.com/api/v1/docs/Home) (Mist account required)
    * [Mist Blog](https://www.mist.com/news/?md_post_type=post)
    * [Mist Updates](https://www.mist.com/documentation/category/product-updates/)
  title: Mist API
  version: 0.2.5
servers:
  - description: Mist AWS US
    url: 'https://api.mist.com'
  - description: Mist AWS EU
    url: 'https://api.eu.mist.com'
  - description: Mist GCP US
    url: 'https://api.gc1.mist.com'
paths:
  '/api/v1/invite/verify/{token}':
    parameters:
      - in: path
        name: token
        required: true
        schema:
          type: string
    post:
      description: |
        NOTE: another call to ```GET /api/v1/self``` is required to see the new set of privileges
      operationId: verifyMspAdminInvite
      parameters:
        - example: application/json
          in: header
          name: Accept
          schema:
            type: string
        - example: '{{csrftoken}}'
          in: header
          name: X-CSRFToken
          schema:
            type: string
        - example: application/json
          in: header
          name: Content-Type
          schema:
            type: string
      requestBody:
        content: {}
      responses:
        '200':
          content:
            application/json: {}
          description: Successful response
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  detail:
                    type: string
                    minLength: 1
                  requires_two_factor_auth:
                    type: boolean
                  requires_special_char:
                    type: boolean
                  min_length:
                    type: integer
                required:
                  - detail
              examples:
                example-1:
                  value:
                    detail: password policy not met
                    min_length: 8
                    requires_special_char: false
                example-2:
                  value:
                    detail: two factor not enabled
                    requires_two_factor_auth: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
              examples:
                example-invalid:
                  value:
                    detail: invalid secret
                example-invitatio_claimed_by_the_same_one_requesting_it:
                  value:
                    detail: invite created by self
      summary: verifyMspAdminInvite
      tags:
        - Admins
  '/api/v1/mobile/verify/{secret}':
    parameters:
      - in: path
        name: secret
        required: true
        schema:
          type: string
    post:
      description: Verify secret
      operationId: activateSdkInvite
      parameters:
        - example: application/json
          in: header
          name: Accept
          schema:
            type: string
        - example: '{{csrftoken}}'
          in: header
          name: X-CSRFToken
          schema:
            type: string
        - example: application/json
          in: header
          name: Content-Type
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                device_id:
                  type: string
                  minLength: 1
              required:
                - device_id
            examples:
              example-1:
                value:
                  device_id: b069b358-4c97-5319-1f8c-7c5ca64d6ab1
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                  org_id:
                    type: string
                    minLength: 1
                  secret:
                    type: string
                    minLength: 1
                required:
                  - name
                  - org_id
                  - secret
              examples:
                example-1:
                  value:
                    name: Macy's
                    org_id: 2818e386-8dec-2562-9ede-5b8a0fbbdc71
                    secret: device-specific-secret
          description: Successful response
      summary: activateSdkInvite
      tags:
        - SDK Invites
tags:
  - name: Sites
    externalDocs: 
      url: reference/Mist-Sites-APIs.v1.yaml
  - name: Orgs
    externalDocs:
      url: reference/Mist-Orgs-APIs.v1.yaml  
  - description: MSP (Managed Service Provider) contains multiple Organizations.
    name: MSPs      
    externalDocs:
      url: reference/Mist-MSPs-APIs.v1.yaml
  - description: |-
      In a typical enterprise, a separate group of people, Installers, are responsible for install new devices. May it be a new installation (e.g. new stores), a replacement installation (e.g. replacing Cisco APs with Mist APs), or addition (e.g. adding new APs for better coverage). Instead of granting them Admin/Write privilege, it’s more desirable to grant them minimum privileges to do the initial provisioning so they cannot read sensible information (e.g. PSK of a WLAN), or change configs of running APs.

      At a high level, Installer APs try to achieve the following:

      1. identifying a device by MAC (that’s what they see)
      2. they can only touch configurations of the devices they’re installing
      3. allow the following configurations: * name * site assignment * device profile assignment * map and location (x/y) assignment * claim (if not already in the inventory)


      ##### Grace Period
      Grace period provides a dynamic way to limit what devices / sites installer can work on. Generally installers work on recent deployments - bringing up new sites, add newly claimed devices to new / existing sites. They make mistakes, too, and may need to further tweak some of the parameters.
    name: Installer APIs  
    externalDocs:
      url: reference/Mist-Installer-APIs.v1.yaml
  - name: Alarms
  - name: Asset
  - name: Asset Filters
  - description: Beacons represents a physical 3rd-party beacon. The customer will need to tell us the properties of this BLE beacon. So we can use it in our locationing.
    name: Beacons
  - name: Clients - Wireless
  - name: Client Stats - Wireless
  - name: Clients - Wired
  - name: Consts
  - name: Devices
  - name: Utilities
  - name: Virtual Chassis
  - name: Devices Stats
  - name: Guests
  - name: Insights
  - name: Location Stats
  - name: Machine Learning
  - description: |
      #### Map definition
      Maps may represent multiple floor one on top of another or just a collections of maps where the user decide to put into a single site.
    name: Maps
  - name: Site MxEdge Stats
  - name: Packet Captures
  - name: PSKs
  - name: RF Glass
  - description: RSSI Zone is RSSI-based
    name: Rogues
  - name: RRM
  - description: |
      RSSI Zone is RSSI-based
    name: RSSI Zones
  - name: Site
  - name: SkyATP_WIP_
  - description: |
      Subscriptions define how Org Alarms/Reports are delivered to whom
    name: Subscriptions
  - name: Switches - Connected
  - name: Switches - Discovered
  - description: Virtual beacons appear to consumer of our VBLE Mobile SDK as regular BLE beacons.
    name: Virtual Beacons
  - description: |
      **N.B.** For org webhooks, only device-events/alarms/audits/client-join/client-sessions topics are supported.
    name: Webhooks
  - name: Wlans
  - description: |
      WxLAN are ordered rules that defines User Context and Resource relationship
    name: WXLAN Tags
  - name: WXLAN Rules
  - description: |
      Tunnels can be used by a WXLAN rule or by a WLAN.
    name: WXLAN Tunnels
  - description: 'Zones are areas on a map defined by the admin for different purposes. e.g. different Wlans, occupancies, policies.'
    name: Zones
  - name: Zones Stats
  - name: Orgs
  - name: Admins
  - name: Alarm Templates
  - description: |
      API tokens can be generated for a specific Org/Site with the required privileges
    name: API Tokens
  - description: |
      Audit logs records all administrative activities in an Org
    name: Audit Logs
  - name: Certificates
  - description: |-
      Setting up Custom PCAP Bucket Involves the following:

      1. provide the bucket name
      2. we’ll attempt to write a file MIST_TOKEN
      3. you have to verify the ownership of the bucket by providing the content of the MIST_TOKEN
    name: Custom PCAP buckets
  - description: |-
      While Templates / RF Templlates provides powerful ways to control how a Device’s configuration is derived for a Site. There are cases where you’d like another level of control at the Org Level.

      A Device Profile contains a subset of Device’s configurations you’d like a device to have. It will be merged at runtime when we’re provisioning an AP.
    name: Devices Profiles
  - name: Inventory
  - description: |-
      Juniper devices can be managed/adopted by Mist. Currently outbound-ssh + netconf is used.

      A few lines of CLI commands are generated per-Org, allowing the Juniper devices to phone home to Mist.
    name: Juniper Devices
  - name: Licenses
  - description: |
      Mist Edge is a software component outside of Mist Cloud. Stay tuned for what it can do.
    name: MxEdge
  - description: |
      A Mist Edge Cluster represents a group of Mist Edges that will work together to do load-balancing and handle fail-overs.
    name: MxEdge Culsters
  - description: |
      A Mist Tunnel is a special type of L2TPv3 Tunnel that is terminated by a Mist Edge. As we’re configuring both sides, some parameters are automatically generated.
    name: MxTunnels
  - description: |-
      RF Templates are designed to make Radio Configs more consistent across Sites - by creating a RF Templates with desired settings and apply it to Sites. AP/Device-level overwrite can still be done.

      NOTE: country_code, if specified, will take precedence over one defined in the Site
    name: Network Templates
  - name: Org
  - description: |-
      RF Templates are designed to make Radio Configs more consistent across Sites - by creating a RF Templates with desired settings and apply it to Sites. AP/Device-level overwrite can still be done.

      NOTE: country_code, if specified, will take precedence over one defined in the Site
    name: RF Templates
  - name: SDK Clients
  - description: |
      SDK Invites can be generated for (and belongs to) an Org. They can be generated by an Admin of an Org and can be revoked at anytime.
    name: SDK Invites
  - description: |
      SDK Template stores the customization (e.g. background image, text…)
    name: SDK Templates
  - description: 'Security Policy is designed to audit / catch discripancies between “what’s intended to be running” versus “what’s actually running” in a network. Many big organizations have separated Security and IT team (for good reasons). Each site can be assigned a security policy. Whenever an AP is provisioned, the configuration will be checked against the security policy. Any violations will be flagged in Device Config History where you can search for the when and where the violation occurs.'
    name: Security Policy
  - name: Site Groups
  - name: SSO/SAML
  - description: |-
      Templates are collection of configs that can be applied to orgs / sitegroups / sites

      ***Why Templates?***

      Conceptually, site is where configurations will be created (and eventually be derived). People with only a few deployments (or when each deployment is different) will mostly define their WLAN/Tunnels/Policies under a site.

      For big deployments (hundreds / thousands of sites), it’s unpractical to do so. Instead, they can define templates (holding same set of stuff WLAN/Tunnels/Policies) and apply them to sites. Therefore,

      these WLANs/Tunnels/Policies are contained in the template. I.e. Objects like WLAN / WxlanTunnel / WxlanRule can only reference each other in the same template
      At the site level, one site may be applied with multiple templates as well as holding its own.
      So how does derivation work?

      For WLANs, it’s straightforward, a site will simply have multiple WLANs from multiple templates plus those defined in a site itself For Wxlan, all template Wxlan Rules will be checked first. If there’s no match, it will continue checking the Site Wxlan Rules. If there’s no match, the default action defined in the Site Wxlan Rule will be used.

      However, a template Wxlan Rule differs from a Site Wxlan Rule in two ways. 1. It has to come with a WLAN Label on the left. If not, it’s implicit that it matches with ANY of the WLANs defined in the template 2. AP Wxlan Tag (match=ap_id) cannot be created / used as there’s no AP concept at org level
    name: Templates
  - name: Tickets
  - name: MSP
  - name: Org Groups

  - name: RF Template
  - name: Security Policies
  - name: Organization
components:
  securitySchemes:
    Authorization:
      name: 'Token {apitoken}'
      type: apiKey
      in: header
security:
  - API Key - 1: []
